# Code taken from:
# http://flask.pocoo.org/snippets/125/

from httplib2 import Http
import json
import os
from flask import *

def token_info(access_token):
    '''Verifies that an access-token is valid.
    Returns None on fail, and an e-mail on success'''
    h = Http()
    bearer, token = access_token.split()
    url = "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=" + token
    resp, cont = h.request(url)

    if not resp['status'] == '200':
        return None

    # This expects it to be run in Python 3 where cont is bytes
    return json.loads(cont.decode())

def google_authorized(fn):
    """Decorator that checks that requests
    contain an id-token in the request header.
    user_email will be None if the
    authentication failed, and have an id otherwise.

    This also checks that the "audience" field matches a given environment
    variable to verify that the token was generated by a login for that app.

    Usage:
    @app.route("/")
    @google_authorized
    def secured_root(user_email=None):
        pass
    """

    def _wrap(*args, **kwargs):
        if 'Authorization' not in request.headers:
            # Unauthorized
            abort(401)
            return None

        info = token_info(request.headers['Authorization'])
        # Require that the token be valid, have a matching audience field (i.e.
        # that it was issued to the specified app), and that it lacks a verified
        # email for the user.
        # exec("import IPython\nIPython.embed()")
        if info is None or info['audience'] != os.environ['TOKEN_AUDIENCE_ID'] or \
                info.get('email') is None or info.get('verified_email') != True:
            # Unauthorized
            abort(401)
            return None

        return fn(user_email=info['email'], *args, **kwargs)
    return _wrap
